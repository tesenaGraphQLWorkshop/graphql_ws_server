#A schema is a collection of type definitions (hence "typeDefs")
#that together define the "shape" of queries that are executed against
#your data.
# Comments in GraphQL strings (such as this one) start with the hash (#) symbol.


# this enum stores available values for a book binding

enum BookBinding_enum {
              PAPERBACK
              HARDCOVER
                 }

enum BookStatus_enum {
              AVAILABLE
              UNAVAILABLE
}                 

# This "Book" type defines the queryable fields for every book in our data source.

type Book {
    id: Int!
    title: String!
    author: Author!
    year: Int
    binding: BookBinding_enum
    bookStatus: BookStatus_enum!
          }

  type Author {
    name: String!
    books: [Book!]
              }

  # The "Query" type is special: it lists all of the available queries that
  # clients can execute, along with the return type for each. In this
  # case, the "books" query returns an array of zero or more Books (defined above).
  # resolvers for those functions are at ./index.js


  type Query
            {
            greeting: String
            AllBooks: [Book]
            AllAuthors: [Author]
            GetAuthorByBook(title:String): [Author]
            GetBookDetailsFromTitle(title:String): [Book]
            GetBooksByAuthor(name: String): [Book]
            }

#  input AddBookInput
#            {
#              title: String!
#              author: Author!
#              year: Int
#              binding: BookBinding_enum
#              bookStatus: BookStatus_enum
#            }
#  type Mutation
#            {
#              addBook (Input: AddBookInput): Book!
#              addAuthor (name: String!): Author!
#            }